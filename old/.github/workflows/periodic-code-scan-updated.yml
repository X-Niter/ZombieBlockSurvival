name: Periodic Code Scan and Optimization

on:
  schedule:
    - cron: '0 0 * * 3'  # Run every Wednesday at midnight
  workflow_dispatch:  # Allow manual triggering

jobs:
  scan:
    name: Scan Codebase for Issues and Optimizations
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper analysis
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      
      - name: Make AI processor executable
        run: |
          chmod +x .github/scripts/ai_processor.py
      
      - name: Scan codebase with AI
        id: ai-scan
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          .github/scripts/ai_processor.py \
            --repo ${{ github.repository }} \
            --token ${{ secrets.GITHUB_TOKEN }} \
            --mode scan
      
      - name: Create issue with findings
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read the AI analysis output
            let analysisContent = 'No AI analysis available.';
            try {
              const analysis = JSON.parse(process.env.ANALYSIS || '{}');
              analysisContent = '## AI Code Analysis Summary\n\n';
              
              if (analysis.analysis) {
                analysisContent += analysis.analysis + '\n\n';
              }
              
              if (analysis.recommendations && analysis.recommendations.length > 0) {
                analysisContent += '### Recommendations\n\n';
                analysis.recommendations.forEach((rec, i) => {
                  analysisContent += `${i+1}. ${rec}\n`;
                });
                analysisContent += '\n';
              }
              
              if (analysis.code_fixes && Object.keys(analysis.code_fixes).length > 0) {
                analysisContent += '### Potential Code Improvements\n\n';
                for (const [file, fixes] of Object.entries(analysis.code_fixes)) {
                  analysisContent += `**${file}**\n\n`;
                  fixes.forEach(fix => {
                    analysisContent += '```diff\n';
                    analysisContent += `- ${fix.original}\n+ ${fix.replacement}\n`;
                    analysisContent += '```\n\n';
                  });
                }
              }
            } catch (error) {
              console.log('Error parsing analysis:', error);
            }
            
            // Create the optimization issue
            const currentDate = new Date().toISOString().split('T')[0];
            const issueBody = [
              `# Code Scan Results (${currentDate})`,
              '',
              'This is an automated issue created from the periodic code scan.',
              '',
              analysisContent,
              '',
              '## Next Steps',
              '',
              'Please review these findings and indicate which optimizations should be implemented:',
              '',
              '- [ ] Implement all suggested optimizations',
              '- [ ] Implement selected optimizations (please comment with selections)',
              '- [ ] Request more detailed analysis',
              '- [ ] Defer optimizations to a later time',
              '',
              'Reply with `/ai fix` to automatically create PRs for the suggested changes.'
            ].join('\n');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Periodic Code Scan Results - ${currentDate}`,
              body: issueBody,
              labels: ['optimization', 'automated']
            });
        env:
          ANALYSIS: ${{ steps.ai-scan.outputs.analysis }}