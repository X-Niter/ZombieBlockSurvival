name: AI Implementation

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to implement'
        required: true
        type: string
      implementation_type:
        description: 'Type of implementation'
        required: true
        type: choice
        options:
          - fix
          - feature
          - refactor
          - improve
      description:
        description: 'Implementation description'
        required: false
        type: string

permissions:
  contents: read
  checks: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  implement:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests openai
      
      - name: Get issue details
        id: issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = parseInt('${{ github.event.inputs.issue_number }}');
            
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            
            return {
              title: issue.data.title,
              body: issue.data.body || '',
              labels: issue.data.labels.map(label => label.name)
            };
      
      - name: Notify about implementation start
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = parseInt('${{ github.event.inputs.issue_number }}');
            const implementationType = '${{ github.event.inputs.implementation_type }}';
            
            // Post a comment to the issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: [
                `I'm now working on ${implementationType === 'fix' ? 'fixing' : implementationType === 'feature' ? 'implementing' : implementationType === 'refactor' ? 'refactoring' : 'improving'} this issue.`,
                '',
                'Steps:',
                '1. ‚úÖ Analyzing the issue',
                '2. üîÑ Designing a solution',
                '3. ‚è≥ Implementing the code changes',
                '4. ‚è≥ Testing the changes',
                '5. ‚è≥ Creating a pull request',
                '',
                'I\'ll keep you updated on my progress.'
              ].join('\n')
            });
      
      - name: Create implementation branch
        id: create-branch
        run: |
          ISSUE_NUMBER="${{ github.event.inputs.issue_number }}"
          IMPLEMENTATION_TYPE="${{ github.event.inputs.implementation_type }}"
          BRANCH_NAME="${IMPLEMENTATION_TYPE}/issue-${ISSUE_NUMBER}"
          
          git checkout -b "${BRANCH_NAME}"
          
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "Created branch: ${BRANCH_NAME}"
      
      - name: Implement with AI
        id: implement
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python .github/scripts/ai_code_processor.py \
            implement \
            --issue ${{ github.event.inputs.issue_number }} \
            --type ${{ github.event.inputs.implementation_type }} \
            --repo ${{ github.repository }} \
            --output implementation.json
          
          if [ -f implementation.json ]; then
            IMPLEMENTATION_NOTES=$(cat implementation.json | jq -r '.notes // "Implementation complete."')
            echo "notes<<EOF" >> $GITHUB_OUTPUT
            echo "${IMPLEMENTATION_NOTES}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "Implementation notes generated"
          else
            echo "notes=Implementation complete without detailed notes." >> $GITHUB_OUTPUT
            echo "No implementation notes file generated"
          fi
      
      - name: Build and test
        id: build
        run: |
          mvn clean package
          
          if [ $? -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=Build and tests passed successfully." >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Build failed or tests did not pass." >> $GITHUB_OUTPUT
          fi
      
      - name: Commit changes
        run: |
          git config --local user.email "ai-assistant@example.com"
          git config --local user.name "AI Implementation Assistant"
          
          git add .
          git commit -m "Implement ${{ github.event.inputs.implementation_type }} for issue #${{ github.event.inputs.issue_number }}"
      
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.create-branch.outputs.branch_name }}
      
      - name: Create pull request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = parseInt('${{ github.event.inputs.issue_number }}');
            const implementationType = '${{ github.event.inputs.implementation_type }}';
            const branchName = '${{ steps.create-branch.outputs.branch_name }}';
            const buildStatus = '${{ steps.build.outputs.status }}';
            const buildMessage = '${{ steps.build.outputs.message }}';
            const implementationNotes = `${{ steps.implement.outputs.notes }}`;
            
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `${implementationType.charAt(0).toUpperCase() + implementationType.slice(1)} for issue #${issueNumber}`,
              body: [
                `This pull request implements ${implementationType === 'fix' ? 'a fix for' : implementationType === 'feature' ? 'the feature requested in' : implementationType === 'refactor' ? 'the refactoring requested in' : 'the improvements requested in'} issue #${issueNumber}.`,
                '',
                '## Implementation Details',
                implementationNotes,
                '',
                '## Build Status',
                buildMessage,
                '',
                'This PR was generated automatically by the AI implementation workflow.'
              ].join('\n'),
              head: branchName,
              base: 'main'
            });
            
            // Add labels to the PR
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.data.number,
              labels: ['ai-generated', implementationType]
            });
            
            // Comment on the original issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: [
                `I've created a pull request (#${pr.data.number}) with an implementation for this issue.`,
                '',
                `The PR contains ${implementationType === 'fix' ? 'a fix' : implementationType === 'feature' ? 'the requested feature' : implementationType === 'refactor' ? 'the requested refactoring' : 'the requested improvements'}.`,
                '',
                `Build status: ${buildStatus === 'success' ? '‚úÖ Success' : '‚ùå Failed'}`,
                '',
                'Please review the PR and provide feedback.'
              ].join('\n')
            });