name: AI Development Assistant

on:
  issues:
    types: [opened, edited, labeled]
  issue_comment:
    types: [created]
  schedule:
    # Run daily to check for issues that need attention
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      task:
        description: 'AI task to perform'
        required: true
        default: 'analyze-code'
        type: choice
        options:
          - 'analyze-code'
          - 'fix-bugs'
          - 'implement-feature'
          - 'improve-performance'
      description:
        description: 'Description of what to do'
        required: true
        type: string

permissions:
  contents: read
  checks: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  process-request:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests openai

    - name: Configure GitHub CLI
      run: |
        # GitHub CLI already has access to GITHUB_TOKEN by default in GitHub Actions
        # Make sure environment doesn't have conflicting auth method
        unset GITHUB_TOKEN
        gh auth status || gh auth login --with-token < <(echo "${{ secrets.GITHUB_TOKEN }}")

    - name: Determine AI task
      id: determine-task
      run: |
        python -c "
        import os
        import json
        
        # For issue/comment events, determine task from content
        event_name = '${{ github.event_name }}'
        task = '${{ github.event.inputs.task }}' if event_name == 'workflow_dispatch' else 'analyze-issue'
        
        # Set output for next steps
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f'task={task}\\n')
        "

    - name: Process with AI
      id: process-ai
      run: |
        # Create a temporary token file to avoid environment variable conflicts
        echo "${{ secrets.GITHUB_TOKEN }}" > .github_token.txt
        
        python .github/scripts/ai_processor.py \
          --task ${{ steps.determine-task.outputs.task }} \
          --repo ${{ github.repository }} \
          --token-file .github_token.txt \
          --issue ${{ github.event.issue.number || '' }} \
          --description "${{ github.event.inputs.description || github.event.issue.body || '' }}"
          
        # Clean up token file
        rm -f .github_token.txt
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: Create or update PR
      if: steps.process-ai.outputs.create-pr == 'true'
      run: |
        # Create a new branch
        git config --global user.name 'GitHub AI Assistant'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        branch_name="ai-fix-$(date +%s)"
        git checkout -b $branch_name
        
        # Apply changes from the AI
        if [ -f ".github/ai-changes.patch" ]; then
          git apply .github/ai-changes.patch
        fi
        
        # Commit and push
        git add .
        git commit -m "${{ steps.process-ai.outputs.commit-message }}"
        git push origin $branch_name
        
        # Create PR
        gh pr create --title "${{ steps.process-ai.outputs.pr-title }}" \
                    --body "${{ steps.process-ai.outputs.pr-body }}" \
                    --base main
      # GitHub CLI already has access to GITHUB_TOKEN in Actions environment

    - name: Add AI comment to issue
      if: github.event_name == 'issues' || github.event_name == 'issue_comment'
      run: |
        if [ -f ".github/ai-response.md" ]; then
          gh issue comment ${{ github.event.issue.number }} --body-file .github/ai-response.md
        fi
      # GitHub CLI already has access to GITHUB_TOKEN in Actions environment