name: AI Development Orchestrator

on:
  # Run hourly to check for new issues, PRs, and needed improvements
  schedule:
    - cron: '0 * * * *'
  # Run on issue or PR activity  
  issues:
    types: [opened, edited, labeled, unlabeled, reopened]
  issue_comment:
    types: [created, edited]
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      operation_mode:
        description: 'Operation mode'
        required: true
        default: 'full_scan'
        type: choice
        options:
          - full_scan
          - process_issues
          - process_prs
          - generate_improvements
          - emergency_fixes

jobs:
  orchestrator:
    name: AI Development Orchestrator
    runs-on: ubuntu-latest
    outputs:
      action_needed: ${{ steps.determine-action.outputs.action_needed }}
      action_type: ${{ steps.determine-action.outputs.action_type }}
      target_id: ${{ steps.determine-action.outputs.target_id }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests openai
          
      - name: Determine action needed
        id: determine-action
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const operationMode = '${{ github.event.inputs.operation_mode || 'auto' }}';
            let actionNeeded = false;
            let actionType = 'none';
            let targetId = 0;
            
            // Get repository activity stats
            const repoName = context.repo.owner + '/' + context.repo.repo;
            
            // Check for unprocessed issues
            const issuesResponse = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'needs-ai-response',
              per_page: 5
            });
            
            if (issuesResponse.data.length > 0) {
              actionNeeded = true;
              actionType = 'process_issue';
              targetId = issuesResponse.data[0].number;
              console.log(`Found issue #${targetId} needing AI response`);
            }
            
            // Check for PRs needing review if no issues need attention
            if (!actionNeeded || operationMode === 'process_prs') {
              const prsResponse = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 5
              });
              
              for (const pr of prsResponse.data) {
                // Check if PR needs AI review (not created by AI and not reviewed yet)
                const prLabels = await github.rest.issues.listLabelsOnIssue({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number
                });
                
                const labels = prLabels.data.map(label => label.name);
                if (!labels.includes('ai-reviewed') && !labels.includes('ai-generated')) {
                  actionNeeded = true;
                  actionType = 'review_pr';
                  targetId = pr.number;
                  console.log(`Found PR #${targetId} needing AI review`);
                  break;
                }
              }
            }
            
            // Check if we should generate improvements
            const currentHour = new Date().getHours();
            // Generate improvements during off-hours (between 12 AM and 5 AM) or when explicitly requested
            if ((!actionNeeded && (currentHour >= 0 && currentHour < 5)) || operationMode === 'generate_improvements') {
              actionNeeded = true;
              actionType = 'generate_improvements';
              console.log('Scheduling improvement generation');
            }
            
            // Check if emergency fixes are needed
            if (operationMode === 'emergency_fixes') {
              actionNeeded = true;
              actionType = 'emergency_fixes';
              console.log('Emergency fixes requested');
            }
            
            // Set the outputs
            core.setOutput('action_needed', actionNeeded.toString());
            core.setOutput('action_type', actionType);
            core.setOutput('target_id', targetId.toString());
      
      - name: Log orchestrator decision
        run: |
          echo "Action needed: ${{ steps.determine-action.outputs.action_needed }}"
          echo "Action type: ${{ steps.determine-action.outputs.action_type }}"
          echo "Target ID: ${{ steps.determine-action.outputs.target_id }}"

  # Job to process issues
  process-issue:
    name: Process Issue with AI
    needs: orchestrator
    if: needs.orchestrator.outputs.action_type == 'process_issue'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests openai
          
      - name: Process issue
        id: process-issue
        uses: actions/github-script@v6
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ISSUE_NUMBER: ${{ needs.orchestrator.outputs.target_id }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const issueNumber = process.env.ISSUE_NUMBER;
            
            // Helper function to check if issue exists
            async function issueExists(owner, repo, issue_number) {
              try {
                await github.rest.issues.get({
                  owner: owner,
                  repo: repo,
                  issue_number: parseInt(issue_number)
                });
                return true;
              } catch (error) {
                return false;
              }
            }
            
            // Get issue details
            if (!await issueExists(context.repo.owner, context.repo.repo, issueNumber)) {
              console.log(`Issue #${issueNumber} not found`);
              return;
            }
            
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber)
            });
            
            // Get issue comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber)
            });
            
            // Prepare context for AI
            const issueContext = {
              title: issue.data.title,
              body: issue.data.body,
              user: issue.data.user.login,
              comments: comments.data.map(comment => ({
                user: comment.user.login,
                body: comment.body,
                created_at: comment.created_at
              })),
              labels: issue.data.labels.map(label => label.name)
            };
            
            // Write context to file for AI processing
            fs.writeFileSync('issue_context.json', JSON.stringify(issueContext, null, 2));
            
            // Here we would call the AI processor script
            // For demo, we'll just generate a simple response
            
            // This would come from AI in a real implementation
            const aiResponse = [
              `Hello @${issue.data.user.login},`,
              '',
              'Thank you for your issue. I\'m the AI assistant for this project and I\'ll help address your question.',
              '',
              'Based on your description, this appears to be related to [specific part of the code or feature]. Let me analyze what might be happening.',
              '',
              '## Analysis',
              '',
              'I\'ve examined the relevant code and found that the issue occurs because [technical explanation].',
              '',
              '## Suggested Solution',
              '',
              'We can fix this by:',
              '1. Updating the [specific file or class]',
              '2. Changing the [specific method or property]',
              '3. Adding proper error handling for this case',
              '',
              'Would you like me to implement this fix for you? If so, I\'ll create a pull request with the proposed changes.',
              '',
              'Let me know if you have any questions or need further clarification!'
            ].join('\n');
            
            // Post AI response as comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber),
              body: aiResponse
            });
            
            // Remove the needs-ai-response label
            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(issueNumber),
                name: 'needs-ai-response'
              });
            } catch (error) {
              console.log('Error removing label:', error);
            }
            
            // Add ai-responded label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber),
              labels: ['ai-responded']
            });
            
            console.log(`Successfully processed issue #${issueNumber}`);

  # Job to review pull requests
  review-pr:
    name: Review Pull Request with AI
    needs: orchestrator
    if: needs.orchestrator.outputs.action_type == 'review_pr'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests openai
          
      - name: Review PR
        id: review-pr
        uses: actions/github-script@v6
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_NUMBER: ${{ needs.orchestrator.outputs.target_id }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = process.env.PR_NUMBER;
            
            // Get PR details
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(prNumber)
            });
            
            // Get PR files
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(prNumber)
            });
            
            // Analyze changes (this would involve AI in a real implementation)
            const fileChanges = files.data.map(file => `- ${file.filename}: ${file.additions} additions, ${file.deletions} deletions`);
            
            // Create review comment
            const reviewBody = [
              `# AI Review of PR #${prNumber}`,
              '',
              'Thank you for your contribution! I\'ve analyzed the changes in this pull request.',
              '',
              '## Changes Overview',
              `${fileChanges.join('\n')}`,
              '',
              '## Code Quality Analysis',
              'The code looks well-structured and follows the project\'s coding standards. Great job!',
              '',
              '## Potential Improvements',
              '- Consider adding more unit tests for the modified functionality',
              '- The error handling in [specific file] could be expanded to cover more edge cases',
              '- Documentation could be enhanced with examples of how to use the new features',
              '',
              '## Recommendation',
              'This PR looks good to merge after addressing the minor suggestions above. Nice work!'
            ].join('\n');
            
            // Submit review
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(prNumber),
              body: reviewBody,
              event: 'COMMENT' // Use 'APPROVE' if you want automatic approvals
            });
            
            // Add ai-reviewed label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(prNumber),
              labels: ['ai-reviewed']
            });
            
            console.log(`Successfully reviewed PR #${prNumber}`);

  # Job to generate improvements
  generate-improvements:
    name: Generate Code Improvements
    needs: orchestrator
    if: needs.orchestrator.outputs.action_type == 'generate_improvements'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests openai
          
      - name: Compile project
        run: mvn clean compile
          
      - name: Analyze code for improvements
        id: analyze-code
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "Analyzing code for potential improvements..."
          # This would call a sophisticated AI analysis script
          # For demo, we'll just simulate the output
          
          cat > improvement_findings.json << EOL
          {
            "improvements": [
              {
                "file": "src/main/java/com/seventodie/utils/DatabaseManager.java",
                "title": "Optimize database connection pooling",
                "description": "Implement connection pooling to improve performance and resource utilization",
                "priority": "medium",
                "implementation_complexity": "medium"
              },
              {
                "file": "src/main/java/com/seventodie/worldgen/BiomeMapper.java",
                "title": "Improve biome mapping algorithm",
                "description": "Optimize the biome mapping algorithm to reduce processing time",
                "priority": "high",
                "implementation_complexity": "high"
              }
            ]
          }
          EOL
          
      - name: Create improvement issues
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read the improvement findings
            const findings = JSON.parse(fs.readFileSync('improvement_findings.json', 'utf8'));
            
            // Create issues for each improvement
            for (const improvement of findings.improvements) {
              const issueBody = [
                `## AI-Suggested Improvement: ${improvement.title}`,
                '',
                `**File:** \`${improvement.file}\``,
                `**Priority:** ${improvement.priority}`,
                `**Implementation Complexity:** ${improvement.implementation_complexity}`,
                '',
                '### Description',
                `${improvement.description}`,
                '',
                '### Implementation Plan',
                '1. [ ] Analyze current implementation',
                '2. [ ] Design improved solution',
                '3. [ ] Implement changes',
                '4. [ ] Add tests',
                '5. [ ] Update documentation',
                '',
                'This improvement was automatically identified by the AI code analysis system.',
                'Comment with `/ai implement` to have the AI automatically implement this improvement.'
              ].join('\n');
              
              const response = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[AI-Improvement] ${improvement.title}`,
                body: issueBody,
                labels: ['enhancement', 'ai-suggested', 'needs-ai-response']
              });
              
              console.log(`Created improvement issue #${response.data.number}`);
            }
            
            console.log('Successfully created improvement issues');

  # Job to implement emergency fixes
  emergency-fixes:
    name: Implement Emergency Fixes
    needs: orchestrator
    if: needs.orchestrator.outputs.action_type == 'emergency_fixes'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests openai
          
      - name: Run build with tests
        id: build-test
        run: mvn clean test || echo "build_failed=true" >> $GITHUB_OUTPUT
          
      - name: Fix critical issues
        if: steps.build-test.outputs.build_failed == 'true'
        id: fix-issues
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "Analyzing build failures and implementing fixes..."
          # This would involve AI analyzing build logs and implementing fixes
          # For demo, we just create a branch with a placeholder fix
          
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # Create a branch for the fix
          git checkout -b emergency-fix-$(date +%Y%m%d%H%M%S)
          
          # Create a placeholder fix
          echo "// Emergency fix placeholder" > emergency-fix.java
          git add emergency-fix.java
          git commit -m "AI: Emergency fix for build failure"
          git push origin HEAD
          
          # Output the branch name for PR creation
          echo "fix_branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT
          
      - name: Create PR for emergency fix
        if: steps.fix-issues.outputs.fix_branch
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fixBranch = '${{ steps.fix-issues.outputs.fix_branch }}';
            
            // Create a PR for the emergency fix
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'AI: Emergency Fix for Build Failure',
              body: [
                'This pull request contains emergency fixes for build failures detected by the AI system.',
                '',
                '## Build Failure Analysis',
                'The build is failing due to [specific reason would be identified by AI].',
                '',
                '## Implemented Fixes',
                '- Fixed [specific issue] in [specific file]',
                '- Updated [dependencies or configuration]',
                '',
                'This PR was automatically generated by the AI emergency fix system.',
                'Please review and merge if appropriate.'
              ].join('\n'),
              head: fixBranch,
              base: 'main'
            });
            
            // Add labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.data.number,
              labels: ['emergency-fix', 'ai-generated', 'high-priority']
            });
            
            console.log(`Created emergency fix PR #${pr.data.number}`);